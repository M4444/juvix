mod LLVM.Data.List where

open Prelude
open LLVM.Data.Product
open LLVM.Data.Ord
open LLVM.Data
open LLVM.Data.Int

type list a 
    = Nil : (a : ty) -> list a
    | Cons : (a : ty) -> a -> list a -> list a

sig foldr : (a : ty) -> (b : ty) -> (a -> b -> b) -> b -> list a -> b
let foldr _ _ _ z Nil = z
let foldr a b f z (h ∷ hs) = f h (foldr a b f z hs)

sig foldl : (a : ty) -> (b : ty) -> (b -> a -> b) -> b -> list a -> b
let foldl _ _ _ z Nil = z
let foldl a b f z (Cons h hs) = foldl a b f (f z h) hs

sig map : (a : ty) -> (b : ty) -> (a -> b) -> b -> list a -> b
let map _ _ f Nil = Nil
let map a b f (Cons h hs) = Cons (f h) (map a b f hs)

sig filter : (a : ty) -> (a -> Bool) -> list a -> list a
let filter _ f Nil = Nil
let filter a f (h ∷ hs) = case f h of
    | True -> h ∷ filter a f hs
    | False -> filter a f hs

sig length : (a : ty) -> list a -> int
let length _ (Nil _) = 0
let length a (∷ _ _ l) = 1 Int.+ (length a l)

sig rev : (a : ty) -> list a -> list a -> list a
let rev t (Nil _) a = a
let rev t (Cons _ x xs) a = rev xs (Cons t x a)

sig reverse : (a : ty) -> list a -> list a
let reverse a l = rev a l (Nil a)

sig replicate : (a : ty) -> int -> a -> list a
let replicate a zero _ = Nil a
let replicate a (suc n) x = Cons a x (replicate a n x)

sig take : (a : ty) -> nat -> list a -> list a
let take a (suc n) (Cons _ x xs) = Cons a x (take a n xs)
let take a _ _ = Nil a

sig splitAt : (a : Type) -> int -> list a -> list a
let splitAt a _ (Nil _) = Nil a , Nil a
let splitAt a zero xs = , (list a) (list a) (Nil a) xs
let splitAt a (suc zero) (x ∷ xs) = , (list a) (list a) (∷ a x (Nil a)) xs
let splitAt a (suc (suc m)) (x ∷ xs) = case splitAt a m xs of
    | (, la _ xs' xs'') -> pair (la la (∷ a x xs')) xs''

sig merge : (a : ty) -> (a -> a -> Ordering) -> list a -> list a -> list a
let merge a cmp (Cons x xs) (Cons y ys) = case cmp x y of
    | LT -> Cons a x (merge a cmp xs (Cons a y ys))
    | _ -> Cons a y (merge a cmp (Cons a x xs) ys)
let merge _ _ (Nil _) ys = ys
let merge _ _ xs (Nil _) = xs

sig (++) : (a : ty) -> list a -> list a -> list a
let (++) a (Nil _) ys = ys
let (++) a (Cons _ x xs) ys = Cons a x ((++) a xs ys)
-- declare infixl (++) 5

ltx : a -> Bool
ltx y = case cmp y x of
  | LT -> True
  | _ -> False

gex : a -> Bool
gex y = not (ltx y)


sig quickSort : (a : ty) -> (a -> a -> Ordering) -> list a -> list a
let quickSort a _ (Nil _) = (Nil a)
let quickSort a _ (Cons _ x (Nil _)) = Cons a x (Nil a)
let quickSort a cmp (Cons _ x ys) =
  (++) a (quickSort a (filter a ltx) ys)
         ((++) a (Cons a x (Nil a)) (quickSort a (filter a gex) ys))

