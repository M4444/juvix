Rec
    { recordContents = T
        { public = fromList
            [
                ( "*"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just
                            ( ":infix" "->" "field"
                                ( ":infix" "->" "field" "field" ) )
                        , defTerm =
                            ( ":lambda-case"
                                ( () ( ":primitive" "Circuit.mul" ) ) )
                        , defPrecedence = Pred Left 7 } ) )
            ,
                ( "field"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just "ty"
                        , defTerm =
                            ( ":lambda-case"
                                ( () ( ":primitive" "Circuit.field" ) ) )
                        , defPrecedence = Pred Left 9 } ) )
            ,
                ( "P", SumCon ( Sum { sumTDef = Nothing, sumTName = "Bar" } ) )
            ,
                ( "+"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just
                            ( ":infix" "->" "field"
                                ( ":infix" "->" "field" "field" ) )
                        , defTerm =
                            ( ":lambda-case"
                                ( () ( ":primitive" "Circuit.add" ) ) )
                        , defPrecedence = Pred Left 5 } ) )
            ,
                ( "main"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just "field"
                        , defTerm =
                            ( ":lambda-case"
                                ( ()
                                    ( ":let-match" "vst"
                                        ( () "verySimpleTerm" )
                                        ( ":let-match" "pm"
                                            ( ()
                                                ( "patternMatch"
                                                    ( ":paren"
                                                        ( "Q" 0 1 2 ) ) ) ) 3 ) ) ) )
                        , defPrecedence = Pred Left 9 } ) )
            ,
                ( "VerySimpleType"
                , TypeDeclar
                    { definitionRepr =
                        ( "VerySimpleType" () ( "One" "field" ) ) } )
            ,
                ( "^"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just
                            ( ":infix" "->" "field"
                                ( ":infix" "->" "field" "field" ) )
                        , defTerm =
                            ( ":lambda-case"
                                ( () ( ":primitive" "Circuit.exp" ) ) )
                        , defPrecedence = Pred Left 8 } ) )
            ,
                ( "Q", SumCon ( Sum { sumTDef = Nothing, sumTName = "Bar" } ) )
            ,
                ( "One"
                , SumCon
                    ( Sum { sumTDef = Nothing, sumTName = "VerySimpleType" } ) )
            ,
                ( "x"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just "field"
                        , defTerm =
                            ( ":lambda-case" ( () 3 ) )
                        , defPrecedence = Pred Left 9 } ) )
            ,
                ( "=="
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just
                            ( ":infix" "->" "field"
                                ( ":infix" "->" "field" "bool" ) )
                        , defTerm =
                            ( ":lambda-case"
                                ( () ( ":primitive" "Circuit.eq" ) ) )
                        , defPrecedence = Pred Left 2 } ) )
            ,
                ( "verySimpleTerm"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just "VerySimpleType"
                        , defTerm =
                            ( ":lambda-case" ( () ( "One" 0 ) ) )
                        , defPrecedence = Pred Left 9 } ) )
            ,
                ( "patternMatch"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just
                            ( ":infix" "->" "Bar" "field" )
                        , defTerm =
                            ( ":lambda-case"
                                (
                                    ( ( "P" "x" "y" ) )
                                    ( ":infix" "^" "x"
                                        ( ":infix" "+" 2
                                            ( ":infix" "^" "y" 2 ) ) ) )
                                (
                                    ( ( "Q" "x" "y" "z" ) )
                                    ( ":infix" "^" "x"
                                        ( ":infix" "+" 2
                                            ( ":infix" "^" "y"
                                                ( ":infix" "+" 2
                                                    ( ":infix" "^" "z" 2 ) ) ) ) ) ) )
                        , defPrecedence = Pred Left 9 } ) )
            ,
                ( "Bar"
                , TypeDeclar
                    { definitionRepr =
                        (
                            ( "Bar" ":type" "ty" ) ()
                            ( "P" "field" "field" )
                            ( "Q" "field" "field" "field" ) ) } ) ]
        , private = fromList [] }
    , recordMTy = Nothing
    , recordOpenList = []
    , recordQualifiedMap = map }