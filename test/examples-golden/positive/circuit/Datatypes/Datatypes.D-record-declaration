ShowRec
    { contents = T
        { public = fromList
            [
                ( "sExpField"
                , Info
                    { infoTable = fromList []
                    , infoDef = TypeDeclar
                        { definitionRepr =
                            ( "type" "sExpField" ()
                                ( "Atom" "TopLevel.Prelude.Circuit.field" )
                                ( "SPair" "sExpField" "sExpField" ) ) } } )
            ,
                ( "Atom"
                , Info
                    { infoTable = fromList []
                    , infoDef = SumCon
                        ( Sum
                            { sumTDef = Nothing, sumTName = "sExpField" } ) } )
            ,
                ( "s1"
                , Info
                    { infoTable = fromList []
                    , infoDef = Def
                        ( D
                            { defUsage = Nothing
                            , defMTy = Just "sExpField"
                            , defTerm =
                                ( ":lambda-case"
                                    ( ()
                                        ( "SPair"
                                            ( ":paren" ( "Atom" 1 ) )
                                            ( ":paren"
                                                ( "SPair"
                                                    ( ":paren"
                                                        ( "SPair"
                                                            ( ":paren"
                                                                ( "Atom" 2 ) )
                                                            ( ":paren"
                                                                ( "Atom" 3 ) ) ) )
                                                    ( ":paren"
                                                        ( "Atom" 4 ) ) ) ) ) ) )
                            , defPrecedence = Pred Left 9 } ) } )
            ,
                ( "functionTypeInConstructor"
                , Info
                    { infoTable = fromList []
                    , infoDef = TypeDeclar
                        { definitionRepr =
                            ( "type"
                                ( "functionTypeInConstructor" ":type" "TopLevel.Prelude.ty" ) ()
                                ( "FTIC_Left" "TopLevel.Prelude.Circuit.field" )
                                ( "FTIC_Right"
                                    ( "TopLevel.Prelude.->" "TopLevel.Prelude.Circuit.field" "TopLevel.Prelude.Circuit.field" ) ) ) } } )
            ,
                ( "P"
                , Info
                    { infoTable = fromList []
                    , infoDef = SumCon
                        ( Sum { sumTDef = Nothing, sumTName = "bar" } ) } )
            ,
                ( "fticTestFunc"
                , Info
                    { infoTable = fromList []
                    , infoDef = Def
                        ( D
                            { defUsage = Nothing
                            , defMTy = Just
                                ( "TopLevel.Prelude.->" "TopLevel.Prelude.Circuit.field" "TopLevel.Prelude.Circuit.field" )
                            , defTerm =
                                ( ":lambda-case" ( ( "x" ) "x" ) )
                            , defPrecedence = Pred Left 9 } ) } )
            ,
                ( "fticTestTerm"
                , Info
                    { infoTable = fromList []
                    , infoDef = Def
                        ( D
                            { defUsage = Nothing
                            , defMTy = Just "functionTypeInConstructor"
                            , defTerm =
                                ( ":lambda-case"
                                    ( () ( "FTIC_Right" "fticTestFunc" ) ) )
                            , defPrecedence = Pred Left 9 } ) } )
            ,
                ( "main"
                , Info
                    { infoTable = fromList []
                    , infoDef = Def
                        ( D
                            { defUsage = Nothing
                            , defMTy = Just "TopLevel.Prelude.Circuit.field"
                            , defTerm =
                                ( ":lambda-case"
                                    ( ()
                                        ( ":let-match" "vst"
                                            ( () "verySimpleTerm" )
                                            ( ":let-match" "pm"
                                                ( ()
                                                    ( "patternMatch"
                                                        ( ":paren"
                                                            ( "Q" 0 1 2 ) ) ) )
                                                ( ":let-match" "ftict"
                                                    ( () "fticTestTerm" )
                                                    ( ":let-match" "sexpTest"
                                                        ( ()
                                                            ( "ssize" "s1" ) ) 3 ) ) ) ) ) )
                            , defPrecedence = Pred Left 9 } ) } )
            ,
                ( "ssize"
                , Info
                    { infoTable = fromList []
                    , infoDef = Def
                        ( D
                            { defUsage = Nothing
                            , defMTy = Just
                                ( "TopLevel.Prelude.->" "sExpField" "TopLevel.Prelude.Circuit.field" )
                            , defTerm =
                                ( ":lambda-case"
                                    ( ( ( "Atom" "x" ) ) 1 )
                                    (
                                        ( ( "SPair" "x" "y" ) )
                                        ( "TopLevel.Prelude.Circuit.Field.+"
                                            ( "ssize" "x" )
                                            ( "ssize" "y" ) ) ) )
                            , defPrecedence = Pred Left 9 } ) } )
            ,
                ( "verySimpleType"
                , Info
                    { infoTable = fromList []
                    , infoDef = TypeDeclar
                        { definitionRepr =
                            ( "type" "verySimpleType" ()
                                ( "One" "TopLevel.Prelude.Circuit.field" ) ) } } )
            ,
                ( "SPair"
                , Info
                    { infoTable = fromList []
                    , infoDef = SumCon
                        ( Sum
                            { sumTDef = Nothing, sumTName = "sExpField" } ) } )
            ,
                ( "Q"
                , Info
                    { infoTable = fromList []
                    , infoDef = SumCon
                        ( Sum { sumTDef = Nothing, sumTName = "bar" } ) } )
            ,
                ( "FTIC_Left"
                , Info
                    { infoTable = fromList []
                    , infoDef = SumCon
                        ( Sum
                            { sumTDef = Nothing
                            , sumTName = "functionTypeInConstructor" } ) } )
            ,
                ( "One"
                , Info
                    { infoTable = fromList []
                    , infoDef = SumCon
                        ( Sum
                            { sumTDef = Nothing
                            , sumTName = "verySimpleType" } ) } )
            ,
                ( "FTIC_Right"
                , Info
                    { infoTable = fromList []
                    , infoDef = SumCon
                        ( Sum
                            { sumTDef = Nothing
                            , sumTName = "functionTypeInConstructor" } ) } )
            ,
                ( "verySimpleTerm"
                , Info
                    { infoTable = fromList []
                    , infoDef = Def
                        ( D
                            { defUsage = Nothing
                            , defMTy = Just "verySimpleType"
                            , defTerm =
                                ( ":lambda-case" ( () ( "One" 0 ) ) )
                            , defPrecedence = Pred Left 9 } ) } )
            ,
                ( "patternMatch"
                , Info
                    { infoTable = fromList []
                    , infoDef = Def
                        ( D
                            { defUsage = Nothing
                            , defMTy = Just
                                ( "TopLevel.Prelude.->" "bar" "TopLevel.Prelude.Circuit.field" )
                            , defTerm =
                                ( ":lambda-case"
                                    (
                                        ( ( "P" "x" "y" ) )
                                        ( "TopLevel.Prelude.Circuit.Field.+"
                                            ( "TopLevel.Prelude.Circuit.Field.^" "x" 2 )
                                            ( "TopLevel.Prelude.Circuit.Field.^" "y" 2 ) ) )
                                    (
                                        ( ( "Q" "x" "y" "z" ) )
                                        ( "TopLevel.Prelude.Circuit.Field.+"
                                            ( "TopLevel.Prelude.Circuit.Field.^" "x" 2 )
                                            ( "TopLevel.Prelude.Circuit.Field.+"
                                                ( "TopLevel.Prelude.Circuit.Field.^" "y" 2 )
                                                ( "TopLevel.Prelude.Circuit.Field.^" "z" 2 ) ) ) ) )
                            , defPrecedence = Pred Left 9 } ) } )
            ,
                ( "bar"
                , Info
                    { infoTable = fromList []
                    , infoDef = TypeDeclar
                        { definitionRepr =
                            ( "type"
                                ( "bar" ":type" "TopLevel.Prelude.ty" ) ()
                                ( "P" "TopLevel.Prelude.Circuit.field" "TopLevel.Prelude.Circuit.field" )
                                ( "Q" "TopLevel.Prelude.Circuit.field" "TopLevel.Prelude.Circuit.field" "TopLevel.Prelude.Circuit.field" ) ) } } ) ]
        , private = fromList [] }
    , mTy = Nothing
    , openList = []
    , qualifiedMap = fromList
        [
            ( "eq"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "Circuit" ] } )
        ,
            ( "sub"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "Circuit" ] } )
        ,
            ( "cat-coproduct-elim"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "mul"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "Circuit" ] } )
        ,
            ( "cat-coproduct"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "cat-coproduct-intro-right"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "Field"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "Circuit" ] } )
        ,
            ( "ty_"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "*"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "Circuit", "Field" ] } )
        ,
            ( ":"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "field"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "Circuit" ] } )
        ,
            ( "exp"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "Circuit" ] } )
        ,
            ( "xor"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "Circuit" ] } )
        ,
            ( "ty"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "SAny"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "+"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "Circuit", "Field" ] } )
        ,
            ( "Circuit"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "LLVM"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "->"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "cat-product-elim-left"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "^"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "Circuit", "Field" ] } )
        ,
            ( "add"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "Circuit" ] } )
        ,
            ( "arr"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "Michelson"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "or"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "Circuit" ] } )
        ,
            ( "id"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "cat-product-elim-right"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "const"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "cat-product"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "=="
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "Circuit", "Field" ] } )
        ,
            ( "div"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "Circuit" ] } )
        ,
            ( "cat-product-intro"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "int"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "Circuit" ] } )
        ,
            ( "dpair"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "bool"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "Circuit" ] } )
        ,
            ( "and%"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "Circuit" ] } )
        ,
            ( "cat-coproduct-intro-left"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } ) ] }