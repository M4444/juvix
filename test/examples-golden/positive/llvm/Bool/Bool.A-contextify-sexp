ShowMod
    { contents = T
        { public = fromList
            [
                ( "is-false"
                , Info
                    { infoTable = fromList
                        [ ( "type", ( ":infix" "->" "bool" "bool" ) ) ]
                    , infoDef = Term
                        ( ":lambda-case"
                            ( ( ( "True" ) ) "False" )
                            ( ( ( "False" ) ) "True" ) ) } )
            ,
                ( "main"
                , Info
                    { infoTable = fromList
                        [ ( "type", "string" ) ]
                    , infoDef = Term
                        ( ":lambda-case" ( () "hello-world" ) ) } ) ]
        , private = fromList [] }
    , openList = []
    , qualifiedMap = fromList
        [
            ( "cat-coproduct-elim"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( ":"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "ty_"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "cat-coproduct-intro-right"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "SAny"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "cat-product-elim-left"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "True"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "LLVM", "Data", "Bool" ] } )
        ,
            ( "id"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "dpair"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "cat-coproduct-intro-left"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "cat-coproduct"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "ty"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "False"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "LLVM", "Data", "Bool" ] } )
        ,
            ( "string"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "LLVM", "Data", "String" ] } )
        ,
            ( "->"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "arr"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "cat-product-elim-right"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "const"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "cat-product"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "cat-product-intro"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "bool"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "LLVM", "Data", "Bool" ] } ) ] }