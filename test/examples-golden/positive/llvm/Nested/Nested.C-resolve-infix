ShowMod
    { contents = T
        { public = fromList
            [
                ( "main"
                , Info
                    { infoTable = fromList
                        [
                            ( "type"
                            ,
                                ( "TopLevel.Prelude.->" "TopLevel.Prelude.LLVM.int"
                                    ( "TopLevel.Prelude.->" "TopLevel.Prelude.LLVM.int"
                                        ( "TopLevel.Prelude.->" "TopLevel.Prelude.LLVM.int" "TopLevel.Prelude.LLVM.int" ) ) ) ) ]
                    , infoDef = Term
                        ( ":lambda-case"
                            (
                                ( "x" "y" "z" )
                                ( "TopLevel.Prelude.LLVM.Int.+"
                                    ( "TopLevel.Prelude.LLVM.Int.*" "x" 2 )
                                    ( "TopLevel.Prelude.LLVM.Int.+"
                                        ( "TopLevel.Prelude.LLVM.Int.*" "y" 2 )
                                        ( "TopLevel.Prelude.LLVM.Int.+"
                                            ( "TopLevel.Prelude.LLVM.Int.*" "z" 2 ) 5 ) ) ) ) ) } ) ]
        , private = fromList [] }
    , openList = []
    , qualifiedMap = fromList
        [
            ( "cat-coproduct-elim"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( ":"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "ty_"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "cat-coproduct-intro-right"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "cat-cons"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "SAny"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "+"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "LLVM", "Int" ] } )
        ,
            ( "LLVM"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "cat-product-elim-left"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "add"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "LLVM", "Int" ] } )
        ,
            ( "cat-atom"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "cat-keyword"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "id"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "int8"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude", "LLVM" ] } )
        ,
            ( "dpair"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "cat-coproduct-intro-left"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "sub"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "LLVM", "Int" ] } )
        ,
            ( "int16"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude", "LLVM" ] } )
        ,
            ( "mul"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "LLVM", "Int" ] } )
        ,
            ( "cat-coproduct"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "*"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "LLVM", "Int" ] } )
        ,
            ( "ty"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "-"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "LLVM", "Int" ] } )
        ,
            ( "string"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude", "LLVM" ] } )
        ,
            ( "->"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "arr"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "Michelson"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "cat-product-elim-right"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "const"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "cat-product"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "categorial-type"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "Interpreter"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "Int"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude", "LLVM" ] } )
        ,
            ( "cat-product-intro"
            , SymInfo
                { used = NotUsed, mod = "TopLevel" :| [ "Prelude" ] } )
        ,
            ( "int"
            , SymInfo
                { used = NotUsed
                , mod = "TopLevel" :|
                    [ "Prelude", "LLVM" ] } ) ] }