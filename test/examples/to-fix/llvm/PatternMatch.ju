mod PatternMatch where

open Prelude
open LLVM
open Int

type sExpField = Atom int | SPair sExpField sExpField

sig s1 : sExpField
let s1 = SPair (Atom 1) (SPair (SPair (Atom 2) (Atom 3)) (Atom 4))

sig ssize : sExpField -> int
let ssize (Atom x) = 1
let ssize (SPair x y) = ssize x + ssize y

type pq : ty = | P int int | Q int int int

sig three : int
let three = 3

sig patternMatch : pq -> int
let patternMatch (P three y) = x + y
let patternMatch (P x y) = x + y
let patternMatch (Q x y z) = x + y + z

sig main : int
let main = let pm = patternMatch (P 3 4) in 1
