mod Datatypes where

open Prelude
open Michelson

sig (+) : nat -> nat -> nat
let (+) = %Michelson.add
declare infixl (+) 5

sig nil : list operation
let nil = %Michelson.nil

sig make-pair : list operation -> nat -> pair (list operation) nat
let make-pair = %Michelson.pair

type VerySimpleType = One int

sig verySimpleTerm : VerySimpleType
let verySimpleTerm = One 0

type Bar : ty = | P nat nat | Q nat nat nat

sig patternMatch : Bar -> nat
let patternMatch (P x y) = x + y
let patternMatch (Q x y z) = x + y + z

sig main : pair nat nat -> pair (list operation) nat
let main =
  -- Fails to typecheck:
  --  "Error: TypecheckerError
  --  ( InsufficientUsage
  --      { usageNeeded = Omega
  --      , usageActual = SNat 0
  --      }
  let vs = VerySimpleType in

  -- Typechecks, but fails to compile:
  --  juvix: src/Juvix/Backends/Michelson/Compilation.hs:53:13-75:
  --  Non-exhaustive patterns in Ann _ (Pi argUsage _ _) (LamM _ [name] body)
  let vst = verySimpleTerm in

  -- Typechecks, but fails to compile:
  --  juvix: src/Juvix/Backends/Michelson/Compilation.hs:53:13-75:
  --  Non-exhaustive patterns in Ann _ (Pi argUsage _ _) (LamM _ [name] body)
  let pm = patternMatch (Q 0 1 2) in

  \_ -> make-pair nil 0
